<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS61A-lab5</title>
    <link href="/2022/08/10/CS61A/lab5/"/>
    <url>/2022/08/10/CS61A/lab5/</url>
    
    <content type="html"><![CDATA[<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h3 id="Q1-Factors-List"><a href="#Q1-Factors-List" class="headerlink" title="Q1: Factors List"></a>Q1: Factors List</h3><p>Write <code>factors_list</code>, which takes a number <code>n</code> and returns a list of its factors in ascending order.</p><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factors_list</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a list containing all the numbers that divide `n` evenly, except</span><br><span class="hljs-string">    for the number itself. Make sure the list is in ascending order.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; factors_list(6)</span><br><span class="hljs-string">    [1, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; factors_list(8)</span><br><span class="hljs-string">    [1, 2, 4]</span><br><span class="hljs-string">    &gt;&gt;&gt; factors_list(28)</span><br><span class="hljs-string">    [1, 2, 4, 7, 14]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    all_factors = []<br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n % (i + <span class="hljs-number">1</span>):<br>            all_factors.append(i + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> all_factors<br></code></pre></td></tr></table></figure><h3 id="Q2-Flatten"><a href="#Q2-Flatten" class="headerlink" title="Q2: Flatten"></a>Q2: Flatten</h3><p>Write a function <code>flatten</code> that takes a list and “flattens” it. The list could be a deep list, meaning that there could be a multiple layers of nesting within the list.</p><p>For example, one use case of <code>flatten</code> could be the following:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&gt;&gt;&gt; lst = <span class="hljs-comment">[1, <span class="hljs-comment">[<span class="hljs-comment">[2]</span>, 3]</span>, 4, <span class="hljs-comment">[5, 6]</span>]</span><br>&gt;&gt;&gt; flatten(lst)<br><span class="hljs-comment">[1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p>Make sure your solution does not mutate the input list.</p><blockquote><p><strong>Hint</strong>: you can check if something is a list by using the built-in <code>type</code> function. For example:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">&gt;&gt;&gt; <span class="hljs-keyword">type</span>(3) == list<br><span class="hljs-type">False</span><br>&gt;&gt;&gt; <span class="hljs-keyword">type</span>([1, 2, 3]) == list<br><span class="hljs-type">True</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns a flattened version of list s.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; flatten([1, 2, 3])     # normal list</span><br><span class="hljs-string">    [1, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; x = [1, [2, 3], 4]     # deep list</span><br><span class="hljs-string">    &gt;&gt;&gt; flatten(x)</span><br><span class="hljs-string">    [1, 2, 3, 4]</span><br><span class="hljs-string">    &gt;&gt;&gt; x # Ensure x is not mutated</span><br><span class="hljs-string">    [1, [2, 3], 4]</span><br><span class="hljs-string">    &gt;&gt;&gt; x = [[1, [1, 1]], 1, [1, 1]] # deep list</span><br><span class="hljs-string">    &gt;&gt;&gt; flatten(x)</span><br><span class="hljs-string">    [1, 1, 1, 1, 1, 1]</span><br><span class="hljs-string">    &gt;&gt;&gt; x</span><br><span class="hljs-string">    [[1, [1, 1]], 1, [1, 1]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    f = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rec_flat</span>(<span class="hljs-params">s, n</span>):<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-built_in">len</span>(s):<br>            <span class="hljs-keyword">return</span> <br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(s[n]) != <span class="hljs-built_in">list</span>:<br>            f.append(s[n])<br>        <span class="hljs-keyword">else</span>:<br>            rec_flat(s[n], <span class="hljs-number">0</span>)<br>        rec_flat(s, n + <span class="hljs-number">1</span>)<br>    rec_flat(s, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> f<br></code></pre></td></tr></table></figure><p>pass了但是有点丑……</p><p>因为觉得思路蛮递归的（因为要倒回来用之前的步骤），所以选择了递归。</p><p>思路：</p><ol><li><p>扫描这个list</p></li><li><p>如果元素不是list，就加入f，去看下一个元素；</p></li><li><p>如果元素是list，那就针对这个list，从1.开始</p></li><li><p>如果扫描完了就结束这一次扫描</p></li></ol><h2 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h2><p>Say we have an abstract data type for cities. A city has a name, a latitude coordinate, and a longitude coordinate.</p><p>Our data abstraction has one <strong>constructor</strong>:</p><ul><li><code>make_city(name, lat, lon)</code>: Creates a city object with the given name, latitude, and longitude.</li></ul><p>We also have the following <strong>selectors</strong> in order to get the information for each city:</p><ul><li><code>get_name(city)</code>: Returns the city’s name</li><li><code>get_lat(city)</code>: Returns the city’s latitude</li><li><code>get_lon(city)</code>: Returns the city’s longitude</li></ul><p>Here is how we would use the constructor and selectors to create cities and extract their information:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">berkeley = make_city(<span class="hljs-string">&#x27;Berkeley&#x27;</span>, <span class="hljs-number">122</span>, <span class="hljs-number">37</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">get_name(berkeley)</span><br>&#x27;Berkeley&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">get_lat(berkeley)</span><br>122<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">new_york = make_city(<span class="hljs-string">&#x27;New York City&#x27;</span>, <span class="hljs-number">74</span>, <span class="hljs-number">40</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">get_lon(new_york)</span><br>40<br></code></pre></td></tr></table></figure><p>All of the selector and constructor functions can be found in the lab file, if you are curious to see how they are implemented. However, the point of data abstraction is that we do not need to know how an abstract data type is implemented, but rather just how we can interact with and use the data type.</p><h3 id="Q3-Distance"><a href="#Q3-Distance" class="headerlink" title="Q3: Distance"></a>Q3: Distance</h3><p>We will now implement the function <code>distance</code>, which computes the distance between two city objects. Recall that the distance between two coordinate pairs <code>(x1, y1)</code> and <code>(x2, y2)</code> can be found by calculating the <code>sqrt</code> of <code>(x1 - x2)**2 + (y1 - y2)**2</code>. We have already imported <code>sqrt</code> for your convenience. Use the latitude and longitude of a city as its coordinates; you’ll need to use the selectors to access this info!</p><h5 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">city_a, city_b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &gt;&gt;&gt; city_a = make_city(&#x27;city_a&#x27;, 0, 1)</span><br><span class="hljs-string">    &gt;&gt;&gt; city_b = make_city(&#x27;city_b&#x27;, 0, 2)</span><br><span class="hljs-string">    &gt;&gt;&gt; distance(city_a, city_b)</span><br><span class="hljs-string">    1.0</span><br><span class="hljs-string">    &gt;&gt;&gt; city_c = make_city(&#x27;city_c&#x27;, 6.5, 12)</span><br><span class="hljs-string">    &gt;&gt;&gt; city_d = make_city(&#x27;city_d&#x27;, 2.5, 15)</span><br><span class="hljs-string">    &gt;&gt;&gt; distance(city_c, city_d)</span><br><span class="hljs-string">    5.0</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    x1 = get_lat(city_a)<br>    y1 = get_lon(city_a)<br>    x2 = get_lat(city_b)<br>    y2 = get_lon(city_b)<br>    <span class="hljs-keyword">return</span> sqrt((x1 - x2)**<span class="hljs-number">2</span> + <br>                (y1 - y2)**<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="Q4-Closer-city"><a href="#Q4-Closer-city" class="headerlink" title="Q4: Closer city"></a>Q4: Closer city</h3><p>Next, implement <code>closer_city</code>, a function that takes a latitude, longitude, and two cities, and returns the name of the city that is relatively closer to the provided latitude and longitude.</p><p>You may only use the selectors and constructors introduced above and the <code>distance</code> function you just defined for this question.</p><blockquote><p><strong>Hint</strong>: How can you use your <code>distance</code> function to find the distance between the given location and each of the given cities?</p></blockquote><h5 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">closer_city</span>(<span class="hljs-params">lat, lon, city_a, city_b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Returns the name of either city_a or city_b, whichever is closest to</span><br><span class="hljs-string">    coordinate (lat, lon). If the two cities are the same distance away</span><br><span class="hljs-string">    from the coordinate, consider city_b to be the closer city.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; berkeley = make_city(&#x27;Berkeley&#x27;, 37.87, 112.26)</span><br><span class="hljs-string">    &gt;&gt;&gt; stanford = make_city(&#x27;Stanford&#x27;, 34.05, 118.25)</span><br><span class="hljs-string">    &gt;&gt;&gt; closer_city(38.33, 121.44, berkeley, stanford)</span><br><span class="hljs-string">    &#x27;Stanford&#x27;</span><br><span class="hljs-string">    &gt;&gt;&gt; bucharest = make_city(&#x27;Bucharest&#x27;, 44.43, 26.10)</span><br><span class="hljs-string">    &gt;&gt;&gt; vienna = make_city(&#x27;Vienna&#x27;, 48.20, 16.37)</span><br><span class="hljs-string">    &gt;&gt;&gt; closer_city(41.29, 174.78, bucharest, vienna)</span><br><span class="hljs-string">    &#x27;Bucharest&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    sample_city = make_city(<span class="hljs-string">&#x27;sample&#x27;</span>, lat, lon)<br>    dist_a = distance(sample_city, city_a)<br>    dist_b = distance(sample_city, city_b)<br>    <span class="hljs-keyword">if</span> dist_a &gt; dist_b:<br>        <span class="hljs-keyword">return</span> get_name(city_b)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> get_name(city_a)<br></code></pre></td></tr></table></figure><h3 id="Q5-Don’t-violate-the-abstraction-barrier"><a href="#Q5-Don’t-violate-the-abstraction-barrier" class="headerlink" title="Q5: Don’t violate the abstraction barrier!"></a>Q5: Don’t violate the abstraction barrier!</h3><p>When writing functions that use an data abstraction, we should use the constructor(s) and selector(s) whenever possible instead of assuming the data abstraction’s implementation. Relying on a data abstraction’s underlying implementation is known as <em>violating the abstraction barrier</em>, and we never want to do this!</p><p>通过了,说明之前的code没有越过barrier!芜湖~</p><h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><h3 id="Tree-review"><a href="#Tree-review" class="headerlink" title="Tree review"></a>Tree review</h3><p>A <code>tree</code> is a data structure that represents a hierarchy of information. A file system is a good example of a tree structure. For example, within your <code>cs61a</code> folder, you have folders separating your <code>projects</code>, <code>lab</code> assignments, and <code>homework</code>. The next level is folders that separate different assignments, <code>hw01</code>, <code>lab01</code>, <code>hog</code>, etc., and inside those are the files themselves, including the starter files and <code>ok</code>. Below is an incomplete diagram of what your <code>cs61a</code> directory might look like.</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220810121735858.png" alt="cs61a_tree"></p><p>As you can see, unlike trees in nature, the tree abstract data type is drawn with the root at the top and the leaves at the bottom.</p><p>Some tree terminology:</p><ul><li><strong>root</strong>: the node at the top of the tree</li><li><strong>label</strong>: the value in a node</li><li><strong>branches</strong>: a list of trees directly under the tree’s root</li><li><strong>leaf</strong>: a tree with zero branches</li><li><strong>node</strong>: any location within the tree (e.g., root node, leaf nodes, etc.)</li></ul><p>Our <code>tree</code> abstract data type consists of a root and a list of its <code>branches</code>. To create a tree and access its root value and branches, use the following constructor and selectors:</p><ul><li>Constructor<ul><li><code>tree(label, branches=[])</code>: creates a tree object with the given <code>label</code> value at its root node and list of <code>branches</code>. Notice that the second argument to this constructor, <code>branches</code>, is optional - if you want to make a tree with no branches, leave this argument empty.</li></ul></li><li>Selectors<ul><li><code>label(tree)</code>: returns the value in the root node of <code>tree</code>.</li><li><code>branches(tree)</code>: returns the list of branches of the given <code>tree</code>.</li></ul></li><li>Convenience function<ul><li><code>is_leaf(tree)</code>: returns <code>True</code> if <code>tree</code>‘s list of <code>branches</code> is empty, and <code>False</code> otherwise.</li></ul></li></ul><p>For example, the tree generated by</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dos">number_tree = <span class="hljs-built_in">tree</span>(<span class="hljs-number">1</span>,<br>         [<span class="hljs-built_in">tree</span>(<span class="hljs-number">2</span>),<br>          <span class="hljs-built_in">tree</span>(<span class="hljs-number">3</span>,<br>               [<span class="hljs-built_in">tree</span>(<span class="hljs-number">4</span>),<br>                <span class="hljs-built_in">tree</span>(<span class="hljs-number">5</span>)]),<br>          <span class="hljs-built_in">tree</span>(<span class="hljs-number">6</span>,<br>               [<span class="hljs-built_in">tree</span>(<span class="hljs-number">7</span>)])])<br></code></pre></td></tr></table></figure><p>would look like this:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">   <span class="hljs-number">1</span><br> / | <span class="hljs-string">\</span><br><span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span><br>  / <span class="hljs-string">\</span>  <span class="hljs-string">\</span><br> <span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>To extract the number <code>3</code> from this tree, which is the label of the root of its second branch, we would do this:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">label</span>(<span class="hljs-built_in">branches</span>(number_tree)<span class="hljs-selector-attr">[1]</span>)<br></code></pre></td></tr></table></figure><p>The <code>print_tree</code> function prints out a tree in a human-readable form. The exact form follows the pattern illustrated above, where the root is unindented, and each of its branches is indented one level further.</p><p>def print_tree(t, indent&#x3D;0):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;Print a representation of this tree in which each node is</span><br><span class="hljs-string">indented by two spaces times its depth from the root.</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>print_tree(tree(1))</span><br><span class="hljs-string">1</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>print_tree(tree(1, [tree(2)]))</span><br><span class="hljs-string">1</span><br><span class="hljs-string">  2</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>print_tree(numbers)</span><br><span class="hljs-string">1</span><br><span class="hljs-string">  2</span><br><span class="hljs-string">  3</span><br><span class="hljs-string">    4</span><br><span class="hljs-string">    5</span><br><span class="hljs-string">  6</span><br><span class="hljs-string">    7</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span> * indent + <span class="hljs-built_in">str</span>(label(t)))<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> branches(t):<br>    print_tree(b, indent + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="Q6-Finding-Berries"><a href="#Q6-Finding-Berries" class="headerlink" title="Q6: Finding Berries!"></a>Q6: Finding Berries!</h3><p>The squirrels on campus need your help! There are a lot of trees on campus and the squirrels would like to know which ones contain berries. Define the function <code>berry_finder</code>, which takes in a tree and returns <code>True</code> if the tree contains a node with the value <code>&#39;berry&#39;</code> and <code>False</code> otherwise.</p><blockquote><p><strong>Hint</strong>: To iterate through each of the branches of a particular tree, you can consider using a <code>for</code> loop to get each branch.</p></blockquote><h5 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">berry_finder</span>(<span class="hljs-params">t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns True if t contains a node with the value &#x27;berry&#x27; and </span><br><span class="hljs-string">    False otherwise.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; scrat = tree(&#x27;berry&#x27;)</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(scrat)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; sproul = tree(&#x27;roots&#x27;, [tree(&#x27;branch1&#x27;, [tree(&#x27;leaf&#x27;), tree(&#x27;berry&#x27;)]), tree(&#x27;branch2&#x27;)])</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(sproul)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(numbers)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; t = tree(1, [tree(&#x27;berry&#x27;,[tree(&#x27;not berry&#x27;)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; berry_finder(t)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> label(t) == <span class="hljs-string">&#x27;berry&#x27;</span>:<br>        is_berry = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        is_berry = <span class="hljs-literal">False</span> <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>        is_berry = is_berry <span class="hljs-keyword">or</span> berry_finder(branch)<br>    <span class="hljs-keyword">return</span> is_berry<br></code></pre></td></tr></table></figure><p>tree的先根后结点的搜索方式。</p><p>如何让它找到一个berry就能返回<code>True</code>呢，我这里用的是全部用或语句连接的方式。</p><p>#号部分并不会使其出现一个<code>False</code>就返回<code>False</code>.因为在不同的frame噢(可以思考一下)</p><p>另一种写法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> label(t) == <span class="hljs-string">&#x27;berry&#x27;</span>:<br>    is_berry = <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    is_berry = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>    is_berry += berry_finder(branch)<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(is_berry)<br></code></pre></td></tr></table></figure><p>解法2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> label(t) == <span class="hljs-string">&#x27;berry&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>    <span class="hljs-keyword">if</span> berry_finder(branch):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="Q7-Sprout-leaves"><a href="#Q7-Sprout-leaves" class="headerlink" title="Q7: Sprout leaves"></a>Q7: Sprout leaves</h3><p>Define a function <code>sprout_leaves</code> that takes in a tree, <code>t</code>, and a list of leaves, <code>leaves</code>. It produces a new tree that is identical to <code>t</code>, but where each old leaf node has new branches, one for each leaf in <code>leaves</code>.</p><p>For example, say we have the tree <code>t = tree(1, [tree(2), tree(3, [tree(4)])])</code>:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  <span class="hljs-number">1</span><br> / \<br><span class="hljs-number">2</span>   <span class="hljs-number">3</span><br>    <span class="hljs-string">|</span><br>    <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>If we call <code>sprout_leaves(t, [5, 6])</code>, the result is the following tree:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">     <span class="hljs-number">1</span><br>   /   <span class="hljs-string">\</span><br>  <span class="hljs-number">2</span>     <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span>    |<br><span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">4</span><br>       / <span class="hljs-string">\</span><br>      <span class="hljs-number">5</span>   <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sprout_leaves</span>(<span class="hljs-params">t, leaves</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Sprout new leaves containing the data in leaves at each leaf in</span><br><span class="hljs-string">    the original tree t and return the resulting tree.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t1 = tree(1, [tree(2), tree(3)])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">      3</span><br><span class="hljs-string">    &gt;&gt;&gt; new1 = sprout_leaves(t1, [4, 5])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(new1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">        5</span><br><span class="hljs-string">      3</span><br><span class="hljs-string">        4</span><br><span class="hljs-string">        5</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; t2 = tree(1, [tree(2, [tree(3)])])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(t2)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">    &gt;&gt;&gt; new2 = sprout_leaves(t2, [6, 1, 2])</span><br><span class="hljs-string">    &gt;&gt;&gt; print_tree(new2)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">      2</span><br><span class="hljs-string">        3</span><br><span class="hljs-string">          6</span><br><span class="hljs-string">          1</span><br><span class="hljs-string">          2</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> is_leaf(t):<br>        <span class="hljs-keyword">for</span> leave <span class="hljs-keyword">in</span> leaves:<br>                t.append(tree(leave))<br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment">#</span><br>        <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> branches(t):<br>            sprout_leaves(branch, leaves)<br>    <span class="hljs-keyword">return</span> t<br></code></pre></td></tr></table></figure><p>#那里的else一定要加不然会无限循环….</p><p>不过确实,如果它是leaf的话哪来的branch~</p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-14-Mutability</title>
    <link href="/2022/08/09/CS61A/14-mutability/"/>
    <url>/2022/08/09/CS61A/14-mutability/</url>
    
    <content type="html"><![CDATA[<h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>示例：<code>datetime</code></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809175808356.png" alt="datetime"></p><h5 id="Object是什么"><a href="#Object是什么" class="headerlink" title="Object是什么"></a>Object是什么</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180013314.png"></p><h2 id="Example：Strings"><a href="#Example：Strings" class="headerlink" title="Example：Strings"></a>Example：Strings</h2><p>Strings are objects</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180058638.png" alt="对对象string使用function"></p><h5 id="Representing-Strings-ASCII"><a href="#Representing-Strings-ASCII" class="headerlink" title="Representing Strings:ASCII"></a>Representing Strings:ASCII</h5><p>我们熟悉的ascii编码</p><p>Line feed:换行</p><p>Bell：ring the bell</p><p>横轴和竖轴的坐标表示16进制的两个数字</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180351403.png" alt="ASCII"></p><p>查看ascii编码：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180454481.png"></p><p>所以A在表格里坐标为<code>(4, 1)</code>的地方</p><p>前两行的使用：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180557019.png"></p><p>叮叮叮！</p><h5 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h5><p>可以表示中文了</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180747651.png" alt="还有emoji呢"></p><p>一些用法</p><p>name：这个character的名字</p><p>look：找这个名字的character</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809180920488.png" alt="Look how smiled it is!"></p><p>其他emoji：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181030778.png" alt="Hello,baby!"></p><p>查看表示这个baby emoji的编码，使用<code>encode()</code>:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181146314.png" alt="A的encoding就是A"></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181927729.png" alt="玩起来了"></p><h2 id="Mutation-Operations"><a href="#Mutation-Operations" class="headerlink" title="Mutation Operations"></a>Mutation Operations</h2><blockquote><p>Objects can actually change value overtime.</p></blockquote><p>引入例子：</p><p><code>pop()</code>:丢掉了最后一个，return丢掉的这个</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809181644553.png" alt="suits的故事"></p><p>可以发现<code>original_suits</code>和<code>suits</code>一起变了</p><h5 id="some-objects-can-change"><a href="#some-objects-can-change" class="headerlink" title="some objects can change"></a>some objects can change</h5><p>Jessica长大了：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182130011.png" alt="image-20220809182130011" style="zoom:67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182153182.png" alt="image-20220809182153182" style="zoom:67%;" /></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182209059.png" alt="image-20220809182209059" style="zoom:67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182222369.png" alt="image-20220809182222369" style="zoom:67%;" /></p><p>改变了bound过去的变量<code>jessica</code>也会改变这个object</p><p>mutation：改变，变异</p><p>mutable：可以变的（像tuple就不能变哦）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182051529.png" alt="demo"></p><p>list和dict只是举例。</p><p>拿dict为例：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182451497.png" alt="对字典对象的操作"></p><h5 id="Mutation-can-happen-within-a-function-call"><a href="#Mutation-can-happen-within-a-function-call" class="headerlink" title="Mutation can happen within a function call"></a>Mutation can happen within a function call</h5><p>使用<code>mystery()</code>改变了<code>four</code></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182551903.png"></p><p>Let’s have a look at the frame:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182807015.png" alt="environmental frame"></p><p>and this <code>mystery()</code> can do the same thing:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182739319.png"></p><p>If no arguments:</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809182912832.png" alt="another_mystery()has no arguments"></p><p>It still work!</p><p>That’s because it can search the global frame and it just find <code>four</code>!</p><h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><blockquote><p>Immutable sequences.</p></blockquote><p>If you dont type <code>()</code> and just type a sequence, you can still get a tuple!</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183217619.png" alt="still tuple"></p><p>Make a empty tuple:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183249435.png"></p><p>Call tuple:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183318528.png"></p><p>If I wanna have a tuple which has only one argument:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183408203.png"></p><p>some operations:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183445382.png"></p><p>Because it’s <strong>immutable</strong>,so we can use it as <strong>a key in dict</strong>:</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183618643.png" alt="mutable lsts are not allowed"></p><h5 id="Tuples-r-immutable"><a href="#Tuples-r-immutable" class="headerlink" title="Tuples r immutable"></a>Tuples r immutable</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809183819513.png" alt="immutable"></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809184010513.png"></p><p>可以变的情况:</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809184023658.png" alt="somehow mutable"></p><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><h5 id="Sameness-and-Change"><a href="#Sameness-and-Change" class="headerlink" title="Sameness and Change"></a>Sameness and Change</h5><p>在左侧,a和b是 the same list,所以会一起变</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192002856.png"></p><h5 id="Identity-Operators"><a href="#Identity-Operators" class="headerlink" title="Identity Operators"></a>Identity Operators</h5><p>两个符号的区别:<code>is</code> is more stricted</p><p><code>is</code>:the same</p><p><code>==</code>:equal</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192131090.png" alt="Difference"></p><p>eg.</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192249745.png" alt="example"></p><h5 id="Mutable-default-arguments-r-dangerous"><a href="#Mutable-default-arguments-r-dangerous" class="headerlink" title="Mutable default arguments r dangerous"></a>Mutable default arguments r dangerous</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809192611557.png"></p><p>第二次及之后 call f的时候,s is bound to the same list.</p><p>因为默认值是函数内变量的一部分,不会因为call它就重新生成</p><blockquote><p>Q:Hi,does anyone knows why I call f 3 times and s is bound to the same list instead of create a new list?</p><p>A:Default arguments in python are <strong>evaluated <em>once</em></strong> when the function is <strong>defined</strong>, <em>not</em> each time the function is <strong>called</strong>. This means that if you have a mutable default argument and mutate it, you will have mutated that object for all future calls to the function as well.</p></blockquote><h2 id="Mutable-Functions"><a href="#Mutable-Functions" class="headerlink" title="Mutable Functions"></a>Mutable Functions</h2><h5 id="A-function-with-behavior-that-varies-over-time"><a href="#A-function-with-behavior-that-varies-over-time" class="headerlink" title="A function with behavior that varies over time"></a>A function with behavior that varies over time</h5><p>example:<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809194353626.png"></p><h5 id="Mutable-values-amp-persistent-local-state"><a href="#Mutable-values-amp-persistent-local-state" class="headerlink" title="Mutable values &amp; persistent local state"></a>Mutable values &amp; persistent local state</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809205213464.png"></p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-13-trees</title>
    <link href="/2022/08/09/CS61A/13-trees/"/>
    <url>/2022/08/09/CS61A/13-trees/</url>
    
    <content type="html"><![CDATA[<h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><h5 id="tree-abstraction"><a href="#tree-abstraction" class="headerlink" title="tree abstraction"></a>tree abstraction</h5><p>基本介绍</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809103734831.png" alt="tree的介绍"></p><p>label就是根哦。</p><h5 id="Implementing-the-Tree-Abstraction"><a href="#Implementing-the-Tree-Abstraction" class="headerlink" title="Implementing the Tree Abstraction"></a>Implementing the Tree Abstraction</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809104121607.png" alt="关于tree的function"></p><p>注意下这个<code>is_tree</code>函数。指branch也要是个list。看下面的错误提示，branch整体是一个list，但其中的node是<code>5</code>，正确的应该是<code>[5]</code>或<code>tree(5)</code>，所以会报错。</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809104542861.png" alt="一些操作"></p><h2 id="Tree-Processing"><a href="#Tree-Processing" class="headerlink" title="Tree Processing"></a>Tree Processing</h2><p>例子：斐波那契树</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809105816906.png" alt="斐波那契树"></p><h5 id="Tree-processing-uses-recursion"><a href="#Tree-processing-uses-recursion" class="headerlink" title="Tree processing uses recursion"></a>Tree processing uses recursion</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809110144297.png" alt="Recursion"></p><p>用法举例：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809110414233.png" alt="使用函数count_leaves"></p><h5 id="Question-discussion"><a href="#Question-discussion" class="headerlink" title="Question discussion"></a>Question discussion</h5><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809111422406.png" alt="如何implement leaves function"></p><h5 id="Creating-trees"><a href="#Creating-trees" class="headerlink" title="Creating trees"></a>Creating trees</h5><p>从已有的树建新树（迁移过去）</p><p>increment：增加（所以把leaf都加了1）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112516146.png" alt="两种functions"></p><h2 id="Example-print-trees"><a href="#Example-print-trees" class="headerlink" title="Example:print trees"></a>Example:print trees</h2><p>简单的想法：先打印label，再打印branches</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112657249.png" alt="简单的print"></p><p>试一试，但是发现不好看清结构：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112757188.png"></p><p>改进：使用缩进</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809112945462.png" alt="改进版"></p><p>这样打印出来就可以清楚的看出树的结构：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809113019954.png" alt="eg"></p><p>能明白树的层次（比如谁是谁的兄弟，谁是谁的孩子）</p><h2 id="Example：Summing-paths"><a href="#Example：Summing-paths" class="headerlink" title="Example：Summing paths"></a>Example：Summing paths</h2><h5 id="引入：对fact函数的改进"><a href="#引入：对fact函数的改进" class="headerlink" title="引入：对fact函数的改进"></a>引入：对fact函数的改进</h5><p>第一个函数：先不进行乘法，等运行到base case，即”归“的时候再一次性乘上去。</p><p>第二个函数：加了一个参数k，在”递“的时候就乘完了（第二个参数）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809113509969.png" alt="两种fact"></p><p>根据第二种改进可得：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809113539900.png"></p><h5 id="那么来看Tree"><a href="#那么来看Tree" class="headerlink" title="那么来看Tree"></a>那么来看Tree</h5><p>解释一下这个函数：到了leaf的时候就打印已经完成的sum，即<code>so_far</code></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809114333603.png"></p><h2 id="Example：Counting-paths"><a href="#Example：Counting-paths" class="headerlink" title="Example：Counting paths"></a>Example：Counting paths</h2><p>编写一个函数，算出从label出发加和等于total的总路径数。（包括label本身）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>   total == label(t):<br>    found = <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    found = <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> found + <span class="hljs-built_in">sum</span>([count_path(b, total - label(t)) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> branches(t)])<br></code></pre></td></tr></table></figure><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809120842986.png"></p>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS61A-lab4</title>
    <link href="/2022/08/08/CS61A/lab4/"/>
    <url>/2022/08/08/CS61A/lab4/</url>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808230840796.png"></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808112017089.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>drill = crust <br><span class="hljs-meta">&gt;&gt;&gt; </span>drill = drill() <span class="hljs-comment">#drill = (调用一次curst()) mantle</span><br>______<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>drill = drill() <span class="hljs-comment">#drill = (调用一次mantle()) core</span><br>______<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>drill = drill() <span class="hljs-comment">#drill = (调用一次core() 调用一次mantle()) core </span><br>______<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>drill() <span class="hljs-comment">#即调用了core(),调用完后要显示drill()的返回值哦</span><br></code></pre></td></tr></table></figure><p>注意括号。</p><p>还有注意return 之前调用了什么。core里的<code>mantle( )</code>是直接调用了一次mantle噢</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>2简单，这里不写了</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808164126239.png" alt="三角形示意图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pascal</span>(<span class="hljs-params">row, column</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Returns the value of the item in Pascal&#x27;s Triangle </span><br><span class="hljs-string">    whose position is specified by row and column.</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(0, 0)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(0, 5)# Empty entry; outside of Pascal&#x27;s Triangle</span><br><span class="hljs-string">    0</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(3, 2)# Row 3 (1 3 3 1), Column 2</span><br><span class="hljs-string">    3</span><br><span class="hljs-string">    &gt;&gt;&gt; pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2</span><br><span class="hljs-string">    6</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> row &lt; column:    <span class="hljs-comment"># outside of the Pascal&#x27;s Triangle</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> column:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> pascal(row - <span class="hljs-number">1</span>, column - <span class="hljs-number">1</span>) + pascal(row - <span class="hljs-number">1</span>, column)<br><br></code></pre></td></tr></table></figure><p>弄清楚这个三角形的定义，和分清楚每种情况就可以</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">paths</span>(<span class="hljs-params">m, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return the number of paths from one corner of an</span><br><span class="hljs-string">    M by N grid to the opposite corner.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; paths(2, 2)</span><br><span class="hljs-string">    2</span><br><span class="hljs-string">    &gt;&gt;&gt; paths(5, 7)</span><br><span class="hljs-string">    210</span><br><span class="hljs-string">    &gt;&gt;&gt; paths(117, 1)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &gt;&gt;&gt; paths(1, 157)</span><br><span class="hljs-string">    1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">if</span> m == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> paths(m - <span class="hljs-number">1</span>, n) + paths(m, n - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>这题还是稍稍有点难度</p><p>注意不要重复了。</p><p>思路就是只看最后一步。不管是一次到位还是一次没到位的，都只看一步（否则会重复）</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808230029873.png" alt="3*3的情况"></p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220808172611493.png" alt="知识点补充"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">couple</span>(<span class="hljs-params">s, t</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Return a list of two-element lists in which the i-th element is [s[i], t[i]].</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; a = [1, 2, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; b = [4, 5, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; couple(a, b)</span><br><span class="hljs-string">    [[1, 4], [2, 5], [3, 6]]</span><br><span class="hljs-string">    &gt;&gt;&gt; c = [&#x27;c&#x27;, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; d = [&#x27;s&#x27;, &#x27;1&#x27;]</span><br><span class="hljs-string">    &gt;&gt;&gt; couple(c, d)</span><br><span class="hljs-string">    [[&#x27;c&#x27;, &#x27;s&#x27;], [6, &#x27;1&#x27;]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-built_in">len</span>(t)<br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    lst = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        sublst = []<br>        sublst.append(s[i])<br>        sublst.append(t[i])<br>        lst.append(sublst)<br>    <span class="hljs-keyword">return</span> lst<br></code></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">coords</span>(<span class="hljs-params">fn, seq, lower, upper</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &gt;&gt;&gt; seq = [-4, -2, 0, 1, 3]</span><br><span class="hljs-string">    &gt;&gt;&gt; fn = lambda x: x**2</span><br><span class="hljs-string">    &gt;&gt;&gt; coords(fn, seq, 1, 9)</span><br><span class="hljs-string">    [[-2, 4], [1, 1], [3, 9]]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    <span class="hljs-keyword">return</span> [[i, fn(i)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> seq <span class="hljs-keyword">if</span> fn(i) &gt;= lower <span class="hljs-keyword">and</span> fn(i) &lt;= upper]<br></code></pre></td></tr></table></figure><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">riffle</span>(<span class="hljs-params">deck</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Produces a single, perfect riffle shuffle of DECK, consisting of</span><br><span class="hljs-string">    DECK[0], DECK[M], DECK[1], DECK[M+1], ... where M is position of the</span><br><span class="hljs-string">    second half of the deck.  Assume that len(DECK) is even.</span><br><span class="hljs-string">    &gt;&gt;&gt; riffle([3, 4, 5, 6])</span><br><span class="hljs-string">    [3, 5, 4, 6]</span><br><span class="hljs-string">    &gt;&gt;&gt; riffle(range(20))</span><br><span class="hljs-string">    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;*** YOUR CODE HERE ***&quot;</span><br>    lst = []<br>    fr = <span class="hljs-number">0</span><br>    bc = <span class="hljs-built_in">len</span>(deck) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(deck)):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span>:<br>            lst.append(deck[bc])<br>            bc += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            lst.append(deck[fr])<br>            fr += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lst<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS61A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Sciense</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>李宏毅DL3-CNN</title>
    <link href="/2022/08/03/DL/3-CNN/"/>
    <url>/2022/08/03/DL/3-CNN/</url>
    
    <content type="html"><![CDATA[<h3 id="简介引入"><a href="#简介引入" class="headerlink" title="简介引入"></a>简介引入</h3><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220730105232803.png" name="模型3" style="zoom: 33%;" /><p>输入：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220730105359479.png" alt="输入" style="zoom: 33%;" /><p>拉直成一个向量。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803114218263.png" alt="全连接网络" style="zoom: 33%;" /><p>但是参数太多，容易over fitting，考虑图像的特性，不一定需要全神经元。</p><h4 id="观察1—不用全看"><a href="#观察1—不用全看" class="headerlink" title="观察1—不用全看"></a>观察1—不用全看</h4><p>neuron会看到特别的pattern来判断图片是什么，比如鸟嘴，鸟眼睛，翅膀等。所以并不需要看完整的图片~</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803114632246.png" alt="不用全看" style="zoom: 33%;" /><h5 id="简化1"><a href="#简化1" class="headerlink" title="简化1"></a>简化1</h5><p>一个neuron在意自己field里发生的事情就好：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803114938779.png" alt="只考虑一个Receptive field" style="zoom: 33%;" /><p>那怎么决定看哪个field呢？</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803115154448.png" alt="可以重叠，右边问题的回答都是可以！" style="zoom: 33%;" /><p>第四个问题是指：可不可以不是正方形，长方形怎么样！</p><h5 id="Typical-setting"><a href="#Typical-setting" class="headerlink" title="Typical setting"></a>Typical setting</h5><p>kernel size一般不会设置太大，这里先设置3*3.</p><p>stride：移动的步长</p><p>移到最右边的时候，会超出范围，这时做padding（给超出部分赋值），可以赋值0，也可以赋值平均值。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803115729043.png" alt="示意图" style="zoom: 33%;" /><h4 id="观察2—–同一个pattern可能在图片的不同地方"><a href="#观察2—–同一个pattern可能在图片的不同地方" class="headerlink" title="观察2—–同一个pattern可能在图片的不同地方"></a>观察2—–同一个pattern可能在图片的不同地方</h4><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803115852270.png" alt="侦测鸟嘴的neuron" style="zoom: 33%;" /><p>难道需要每个位置都放一个侦测鸟嘴的neuron吗？</p><h5 id="简化2"><a href="#简化2" class="headerlink" title="简化2"></a>简化2</h5><p>共享参数！</p><p>守备的field不一样，但是参数一样~这样每个地方都可以做到侦测同个东西。</p><p>那参数一样，输出是否会一样？不会，因为输入不一样。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803120224229.png" alt="简化2示意图" style="zoom: 33%;" /><h5 id="typical-setting"><a href="#typical-setting" class="headerlink" title="typical setting"></a>typical setting</h5><p>一样的颜色表示一样的参数。参数叫$filter_i$，他们公用一组参数。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803120420138.png" alt="共用参数" style="zoom:33%;" /><h4 id="整理一下吧"><a href="#整理一下吧" class="headerlink" title="整理一下吧"></a>整理一下吧</h4><p>加了我们的哪些限制，就叫做Convolutional layer 了！</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803162531448.png" alt="conv" style="zoom:33%;" /><h3 id="Conv-Layer-介绍"><a href="#Conv-Layer-介绍" class="headerlink" title="Conv Layer 介绍"></a>Conv Layer 介绍</h3><p>里面有很多filter,filter的作用是抓pattern</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803162710995.png" alt="有很多filter" style="zoom:33%;" /><p>如何抓pattern呢？</p><p>filter和框框里的矩阵相乘，然后移动一个stride，最后形成了新的矩阵：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803162933785.png" alt="示意图" style="zoom: 33%;" /><p>观察这个filter，发现它很在乎斜线那三个数字，这就是它的效果。</p><p>再用第二个filter：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803163448363.png" alt="第二个filter" style="zoom:33%;" /><p>用完n个filter会有n个新矩阵，这些叫做Feature map。</p><p>因此通过conv layer会产生一个feature map。有多少filter就有多少channel。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803163631678.png" alt="注意维度" style="zoom:33%;" /><p>3*3的kernel会不会视野太小？不会噢！</p><p>因为不止一个conv layer！这样原矩阵缩小，缩小，3*3的kernel也能发现原矩阵上距离很远的地方噢！</p><p>在简介里，“共享参数”其实指的就是用一个filter扫过去。这个过程就叫convolution。</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164029838.png" style="zoom:33%;" /><p>比较两种说法：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164106988.png" style="zoom:33%;" /><h2 id="Pooling"><a href="#Pooling" class="headerlink" title="Pooling"></a>Pooling</h2><h4 id="观察3—-可以把图片变小一点！"><a href="#观察3—-可以把图片变小一点！" class="headerlink" title="观察3—-可以把图片变小一点！"></a>观察3—-可以把图片变小一点！</h4><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164226349.png" style="zoom: 33%;" /><h4 id="Pooling-Max-pooling"><a href="#Pooling-Max-pooling" class="headerlink" title="Pooling-Max pooling"></a>Pooling-Max pooling</h4><p>如何运作的呢：</p><p>拿max-pooling来说，就是选一组里最大的那个值：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164417903.png" alt="选择前" style="zoom:33%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164437245.png" alt="选择后" style="zoom:33%;" /><p>（哪几个一组是自己定的）</p><p>pooling之后：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164529458.png" alt="就变成了这样捏" style="zoom: 33%;" /><p>但是由于计算能力越来越强，有时也不用pooling了。</p><h2 id="CNN架构"><a href="#CNN架构" class="headerlink" title="CNN架构"></a>CNN架构</h2><p>Flatten：把矩阵拉直成一个向量</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803164742494.png" alt="整体架构" style="zoom:33%;" /><h2 id="应用：下围棋Playing-Go"><a href="#应用：下围棋Playing-Go" class="headerlink" title="应用：下围棋Playing Go"></a>应用：下围棋Playing Go</h2><p>把棋盘表示成一个向量，黑子表示值为1，白子-1，没子0.</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165021469.png" alt="Playing Go" style="zoom:33%;" /><p>48个channel表示有48种位置描述（理解成战术啦）</p><p>为什么可以用在下围棋上呢？因为围棋和图片有共同特性👇</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165202953.png" style="zoom:33%;" /><p>不过……没有用pooling捏</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165359600.png" alt="没有pooling" style="zoom:33%;" /><h2 id="CNN的缺陷"><a href="#CNN的缺陷" class="headerlink" title="CNN的缺陷"></a>CNN的缺陷</h2><p>放大缩小之后就看不出来了：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220803165608079.png" style="zoom:33%;" /><p>所以要做data augmentation或者用spatial layer</p>]]></content>
    
    
    <categories>
      
      <category>李宏毅机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 Tutorial</title>
    <link href="/2022/08/02/virtual%20human/UE5-Tutorial/"/>
    <url>/2022/08/02/virtual%20human/UE5-Tutorial/</url>
    
    <content type="html"><![CDATA[<p>教程地址：<a href="https://www.youtube.com/watch?v=k-zMkzmduqI">https://www.youtube.com/watch?v=k-zMkzmduqI</a></p><p><a href="https://www.bilibili.com/video/BV1mZ4y127eX?p=17&vd_source=3413af2c1f998ce457ec6cf9d0a1f7b6">【UE5】虚幻引擎 5 (UE5)：16.16.构建Nanite对象_哔哩哔哩_bilibili</a></p><h4 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h4><h5 id="enable-windows"><a href="#enable-windows" class="headerlink" title="enable windows"></a>enable windows</h5><p>在窗口界面可以开启被隐藏的windows，如果不小心把Windows搞乱了，就：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120229560.png" alt="image-20220802120229560" style="zoom: 50%;" /></p><h5 id="windows介绍"><a href="#windows介绍" class="headerlink" title="windows介绍"></a>windows介绍</h5><p>outliner:当前世界里放的东西，可以在里面选择</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802135113632.png" alt="image-20220802135113632" style="zoom:80%;" /><h5 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h5><p>用鼠标操作界面：按左键，按右键，一起按（具体什么效果试一试就知道喽）</p><p>其他鼠标操作：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120404804.png" alt="image-20220802120404804" style="zoom: 67%;" /><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120823755.png" alt="image-20220802120823755" style="zoom: 50%;" /><p>觉得移动的慢可以加快摄像机速度：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120508508.png" alt="image-20220802120508508" style="zoom:80%;" /></p><h5 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h5><p><code>ctrl+z</code>撤销操作</p><p>按<code>空格</code>：切换方式（移动，缩放，…）</p><p>或者，这四个键分别对应qwer：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802120344395.png" alt="image-20220802120344395" style="zoom:80%;" /></p><p><code>F</code>：focus to the object</p><h5 id="其他窗口"><a href="#其他窗口" class="headerlink" title="其他窗口"></a>其他窗口</h5><p>eye icon：隐藏或展示<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802114533861.png" alt="image-20220802114533861" style="zoom: 80%;" /></p><p>点击后可以看到details panel，可以改变形状大小位置等。</p><p>不过要先 enable details panel，在窗口里可以找到。</p><p>按<code>ctrl+空格</code>：开启文件浏览，就是这个东西👇</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802114817102.png" alt="image-20220802114817102"></p><p>这里有我们可以加的文件（但不是在世界里）</p><p>双击某个物体，可以编辑这个asset：</p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802114928634.png" alt="image-20220802114928634"></p><h2 id="view-points"><a href="#view-points" class="headerlink" title="view points"></a>view points</h2><p>在这里选：<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802140116628.png" alt="image-20220802140116628" style="zoom:67%;" /></p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802121111984.png" alt="image-20220802121111984" style="zoom:67%;" /><h2 id="打包成游戏"><a href="#打包成游戏" class="headerlink" title="打包成游戏"></a>打包成游戏</h2><p><a href="https://www.bilibili.com/read/cv16022730/">UE5 PC端windows打包教程 - 哔哩哔哩 (bilibili.com)</a></p><p>注：要先安装windows 10 sdk和下载Microsoft Windows Desktop Runtime 3.1.16，否则会像下面一样感叹号</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802164329137.png" alt="image-20220802164329137" style="zoom: 50%;" /><h2 id="物体操作"><a href="#物体操作" class="headerlink" title="物体操作"></a>物体操作</h2><p>按住<code>alt</code>：复制物体</p><p>按<code>end</code>：自动把物体放在某个东西上</p><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><p>素材网：<a href="http://www.uemodel.com/">UE素材网 (uemodel.com)</a></p><p><a href="https://www.modongwang.com/list-49-1.html">UE4虚幻引擎资源网,Unreal Engine免费素材下载网站 (modongwang.com)</a></p><p><a href="https://www.aigei.com/">爱给网_音效配乐_3D模型_视频素材_游戏素材_免费下载 (aigei.com)</a></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220809171001280.png" alt="爱给网UE资源的位置"></p><p>注意要选对应UE版本的素材，否则会导入失败</p><p>如何导入素材：直接拖拽或点击导入（建议不要直接拖拽）</p><h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><p>选中actor，然后：</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802172645147.png" alt="image-20220802172645147" style="zoom:67%;" /><p>点击添加新的组件，选中，在右边下拉可以看到很多events</p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220802173023158.png" alt="image-20220802173023158" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>数字虚拟人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE开源游戏调查</title>
    <link href="/2022/08/02/virtual%20human/UE%E5%BC%80%E6%BA%90%E6%B8%B8%E6%88%8F%E8%B0%83%E6%9F%A5/"/>
    <url>/2022/08/02/virtual%20human/UE%E5%BC%80%E6%BA%90%E6%B8%B8%E6%88%8F%E8%B0%83%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>开源项目合集：<a href="https://github.com/hui211314dd/UE4GameList">https://github.com/hui211314dd/UE4GameList</a></p>]]></content>
    
    
    <categories>
      
      <category>数字虚拟人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何设置博客</title>
    <link href="/2022/08/01/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/08/01/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>博客网站：<a href="https://tangpizhijisu.github.io/">Hexo (tangpizhijisu.github.io)</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>创建过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br><span class="hljs-comment">#&quot;tag:&quot;后要有个空格</span><br><span class="hljs-comment">#写完后：</span><br>清理命令：<br>hexo clean<br>生成命令：<br>hexo g<br>运行博客命令：<br>hexo s<br>上传到github：<br>hexo d<br></code></pre></td></tr></table></figure><p>引号内换成博客名</p><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><p><img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220801234117742.png"></p><p>这种情况是网不好，再来一次就可以</p><h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><p>主题用户配置手册：<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p>主题改完记得按主题文档里的更新方法更新</p><p>注意如果要改图片，要修改<img src="http://camillle-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220801233850951.png"></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">退一层：<span class="hljs-keyword">cd</span> <span class="hljs-string">..</span><br>退两层：<span class="hljs-keyword">cd</span> <span class="hljs-string">../..</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
